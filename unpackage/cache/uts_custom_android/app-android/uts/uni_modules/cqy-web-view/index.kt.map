{"version":3,"sources":["uni_modules/cqy-web-view/utssdk/app-android/index.vue"],"sourcesContent":["\n\n\n\n\n\n\n  /**\n   * 引用 Android 系统库\n   * [可选实现，按需引入]\n   */\n  import TextUtils from 'android.text.TextUtils';\n  import Button from 'android.widget.Button';\n  import View from 'android.view.View';\n  import WebView from 'android.webkit.WebView';\n\n  /**\n   * 引入三方库\n   * [可选实现，按需引入]\n   *\n   * 在 Android 平台引入三方库有以下两种方式：\n   * 1、[推荐] 通过 仓储 方式引入，将 三方库的依赖信息 配置到 config.json 文件下的 dependencies 字段下。详细配置方式[详见](https://uniapp.dcloud.net.cn/plugin/uts-plugin.html#dependencies)\n   * 2、直接引入，将 三方库的aar或jar文件 放到libs目录下。更多信息[详见](https://uniapp.dcloud.net.cn/plugin/uts-plugin.html#android%E5%B9%B3%E5%8F%B0%E5%8E%9F%E7%94%9F%E9%85%8D%E7%BD%AE)\n   *\n   * 在通过上述任意方式依赖三方库后，使用时需要在文件中 import\n   * import { LottieAnimationView } from 'com.airbnb.lottie.LottieAnimationView'\n   */\n\n  /**\n   * UTSAndroid 为平台内置对象，不需要 import 可直接调用其API，[详见](https://uniapp.dcloud.net.cn/uts/utsandroid.html#utsandroid)\n   */\n\n  //原生提供以下属性或方法的实现\n  export default {\n    /**\n     * 组件名称，也就是开发者使用的标签\n     */\n    name: \"cqy-web-view\",\n    /**\n     * 组件涉及的事件声明，只有声明过的事件，才能被正常发送\n     */\n    emits: ['buttonclick'],\n    /**\n     * 属性声明，组件的使用者会传递这些属性值到组件\n     */\n    props: {\n      \"buttontext\": {\n        type: String,\n        default: \"点击触发\"\n      }\n    },\n    /**\n     * 组件内部变量声明\n     */\n    data() {\n      return {\n\t\t  cqyWebView:null\n\t  }\n    },\n    /**\n     * 属性变化监听器实现\n     */\n    watch: {\n      \"webUrl\": {\n        /**\n         * 这里监听属性变化，并进行组件内部更新\n         */\n        handler(newValue : string, oldValue : string) {\n\t\t\tconsole.log(\"webUrl\"+newValue)\n          if (newValue != oldValue) {\n            // this.$el?.setText(newValue);\n            // this.$el?.loadUrl(newValue);\n\t\t\tthis.$el!.loadUrl(newValue);\n          }\n        },\n        immediate: false // 创建时是否通过此方法更新属性，默认值为false\n      },\n    },\n    /**\n     * 规则：如果没有配置expose，则methods中的方法均对外暴露，如果配置了expose，则以expose的配置为准向外暴露\n     * ['publicMethod'] 含义为：只有 `publicMethod` 在实例上可用\n     */\n    expose: ['doSomething'],\n    methods: {\n      /**\n       * 对外公开的组件方法\n       *\n       * uni-app中调用示例：\n       * this.$refs[\"组件ref\"].doSomething(\"uts-button\");\n       *\n       * uni-app x中调用示例：\n       * 1、引入对应Element\n       * import { UtsButtonElement(组件名称以upper camel case方式命名 + Element) } from 'uts.sdk.modules.utsComponent(组件目录名称以lower camel case方式命名)';\n       * 2、(this.$refs[\"组件ref\"] as UtsButtonElement).doSomething(\"uts-button\");\n       * 或 (uni.getElementById(\"组件id\") as UtsButtonElement).doSomething(\"uts-button\");\n       */\n      doSomething(param : string) {\n\t\t  console.log(\"param=\"+param)\n        this.$el!.loadUrl(param);\n      },\n      /**\n       * 内部使用的组件方法\n       */\n      privateMethod() {\n\n      }\n    },\n    /**\n     * [可选实现] 组件被创建，组件第一个生命周期，\n     * 在内存中被占用的时候被调用，开发者可以在这里执行一些需要提前执行的初始化逻辑\n     */\n    created() {\n\n    },\n    /**\n     * [可选实现] 对应平台的view载体即将被创建，对应前端beforeMount\n     */\n    NVBeforeLoad() {\n\n    },\n    /**\n     * [必须实现] 创建原生View，必须定义返回值类型\n     * 开发者需要重点实现这个函数，声明原生组件被创建出来的过程，以及最终生成的原生组件类型\n     * （Android需要明确知道View类型，需特殊校验）\n     */\n    NVLoad() : WebView {\n      let webView = new WebView($androidContext!);\n\t  // this.cqyWebView = webView;\n\t  webView.loadUrl(\"\")\n      // button.setText(\"点击触发\");\n      // button.setOnClickListener(new ButtonClickListener(this));\n      return webView;\n    },\n    /**\n     * [可选实现] 原生View已创建\n     */\n    NVLoaded() {\n\n    },\n    /**\n     * [可选实现] 原生View布局完成\n     */\n    NVLayouted() {\n\n    },\n    /**\n     * [可选实现] 原生View将释放\n     */\n    NVBeforeUnload() {\n\n    },\n    /**\n     * [可选实现] 原生View已释放，这里可以做释放View之后的操作\n     */\n    NVUnloaded() {\n\n    },\n    /**\n     * [可选实现] 组件销毁\n     */\n    unmounted() {\n\n    },\n    /**\n     * [可选实现] 自定组件布局尺寸，用于告诉排版系统，组件自身需要的宽高\n     * 一般情况下，组件的宽高应该是由终端系统的排版引擎决定，组件开发者不需要实现此函数\n     * 但是部分场景下，组件开发者需要自己维护宽高，则需要开发者重写此函数\n     * \n     * HBuilder X 4.25 版本后新增 UTSMeasureMode 参数\n     */\n    NVMeasure(size : UTSSize,mode:UTSMeasureMode) : UTSSize {\n      // size.width = 300.0.toFloat();\n      // size.height = 200.0.toFloat();\n      return size;\n    }\n  }\n\n  /**\n   * 定义按钮点击后触发回调的类\n   * [可选实现]\n   */\n  class ButtonClickListener extends View.OnClickListener {\n    /**\n     * 如果需要在回调类或者代理类中对组件进行操作，比如调用组件方法，发送事件等，需要在该类中持有组件对应的原生类的对象\n     * 组件原生类的基类为 UTSComponent，该类是一个泛型类，需要接收一个类型变量，该类型变量就是原生组件的类型\n     */\n    private comp : UTSComponent<Button>;\n\n    constructor(comp : UTSComponent<Button>) {\n      super();\n      this.comp = comp;\n    }\n\n    /**\n     * 按钮点击回调方法\n     */\n    override onClick(v ?: View) {\n      console.log(\"按钮被点击\");\n      // 发送事件\n      this.comp.$emit(\"buttonclick\");\n    }\n  }\n\n\n\n\n\n\n"],"names":[],"mappings":";;AAcE,OAAoB,sBAAwB,CAAC;;;;;;;;;;;;;;;;;;;;;8CA+GhC;;kCA7EE;6BAQF,IAAI;2BAuDL,CAEV;gCAIe,CAEf;2BAMW,QAAQ;QACjB,IAAI,UAAU,AAAI,QAAQ;QAE7B,QAAQ,OAAO,CAAC;QAGb,OAAO;IACT;4BAIW,CAEX;8BAIa,CAEb;kCAIiB,CAEjB;8BAIa,CAEb;6BAIY,CAEZ;2BAQU,MAAO,OAAO,EAAC,MAAK,cAAc,GAAI,QAAQ;QAGtD,OAAO;IACT;;yBA9Ec,OAAQ,MAAM,EAAE;QAC9B,QAAQ,GAAG,CAAC,WAAS;QACjB,IAAI,CAAC,KAAG,GAAE,OAAO,CAAC;IACpB;6BAIgB,CAEhB;;sBAtCwC,MAAM,gBAApC,UAAmB,SAAmB;YACnD,QAAQ,GAAG,CAAC,WAAS;YACd,IAAI,YAAY,UAAU;gBAGjC,IAAI,CAAC,KAAG,GAAE,OAAO,CAAC;YACX;QACF"}