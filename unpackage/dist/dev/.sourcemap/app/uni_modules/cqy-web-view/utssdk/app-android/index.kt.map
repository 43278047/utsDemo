{"version":3,"sources":["uni_modules/cqy-web-view/utssdk/app-android/index.vue"],"sourcesContent":["\n\n\n\n\n\n\t/**\n   * 引用 Android 系统库\n   * [可选实现，按需引入]\n   */\n\timport TextUtils from 'android.text.TextUtils';\n\timport View from 'android.view.View';\n\timport WebView from 'android.webkit.WebView';\n\timport WebSettings from 'android.webkit.WebSettings';\n\timport WebViewClient from 'android.webkit.WebViewClient';\n\timport ValueCallback from 'android.webkit.ValueCallback';\n\timport ViewGroup from 'android.view.ViewGroup';\n\timport Build from 'android.os.Build';\n\timport WebResourceRequest from 'android.webkit.WebResourceRequest';\n\timport URL from 'java.net.URL';\n\timport Intent from 'android.content.Intent';\n\timport Uri from 'android.net.Uri';\n\n\t/**\n\t * 引入三方库\n\t * [可选实现，按需引入]\n\t *\n\t * 在 Android 平台引入三方库有以下两种方式：\n\t * 1、[推荐] 通过 仓储 方式引入，将 三方库的依赖信息 配置到 config.json 文件下的 dependencies 字段下。详细配置方式[详见](https://uniapp.dcloud.net.cn/plugin/uts-plugin.html#dependencies)\n\t * 2、直接引入，将 三方库的aar或jar文件 放到libs目录下。更多信息[详见](https://uniapp.dcloud.net.cn/plugin/uts-plugin.html#android%E5%B9%B3%E5%8F%B0%E5%8E%9F%E7%94%9F%E9%85%8D%E7%BD%AE)\n\t *\n\t * 在通过上述任意方式依赖三方库后，使用时需要在文件中 import\n\t * import { LottieAnimationView } from 'com.airbnb.lottie.LottieAnimationView'\n\t */\n\n\t/**\n\t * UTSAndroid 为平台内置对象，不需要 import 可直接调用其API，[详见](https://uniapp.dcloud.net.cn/uts/utsandroid.html#utsandroid)\n\t */\n\n\t//原生提供以下属性或方法的实现\n\texport default {\n\t\t/**\n\t\t * 组件名称，也就是开发者使用的标签\n\t\t */\n\t\tname: \"cqy-web-view\",\n\t\t/**\n\t\t * 组件涉及的事件声明，只有声明过的事件，才能被正常发送\n\t\t */\n\t\temits: ['updateHtml', 'setWebUrl'],\n\t\t/**\n\t\t * 属性声明，组件的使用者会传递这些属性值到组件\n\t\t */\n\t\tprops: {\n\t\t\t\"webUrl\": {\n\t\t\t\ttype: String,\n\t\t\t\tdefault: \"\"\n\t\t\t},\n\t\t\t/**\n\t\t\t\t\t   * 是否隐藏动画\n\t\t\t\t\t   */\n\t\t\t\"hidden\": {\n\t\t\t\ttype: Boolean,\n\t\t\t\tdefault: true\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * 组件内部变量声明\n\t\t */\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\t// webView的UI实例,必须得用这个调用父组件的事件 $emit('')\n\t\t\t\twebViewUIHandler: null as WebViewUIHandler | null,\n\t\t\t\t// webView 实例对象,这个也可以直接使用 this.$el! 全局的函数\n\t\t\t\twebView: null as WebView | null,\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * 属性变化监听器实现\n\t\t */\n\t\twatch: {\n\t\t\t\"webUrl\": {\n\t\t\t\t/**\n\t\t\t\t * 这里监听属性变化，并进行组件内部更新\n\t\t\t\t */\n\t\t\t\thandler(newValue : string, oldValue : string) {\n\t\t\t\t\tconsole.log(\"newValue \" + newValue)\n\t\t\t\t\t// console.log(\"oldValue \"+oldValue)\n\t\t\t\t\tif (newValue != oldValue) {\n\t\t\t\t\t\tthis.$el!.loadUrl(newValue);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\timmediate: false // 创建时是否通过此方法更新属性，默认值为false\n\t\t\t},\n\t\t\t\"hidden\": {\n\t\t\t\thandler(newValue : boolean) {\n\t\t\t\t\tif (this.$el != null) {\n\t\t\t\t\t\tif (newValue) {\n\t\t\t\t\t\t\tthis.$el!.visibility = View.VISIBLE\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.$el!.visibility = View.GONE\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\timmediate: false\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * 规则：如果没有配置expose，则methods中的方法均对外暴露，如果配置了expose，则以expose的配置为准向外暴露\n\t\t * ['publicMethod'] 含义为：只有 `publicMethod` 在实例上可用\n\t\t */\n\t\texpose: ['doSomething', 'hideWebView', 'showWebView'],\n\t\t// 这里面不支持回调函数\n\t\tmethods: {\n\t\t\t/**\n\t\t\t * 对外公开的组件方法\n\t\t\t *\n\t\t\t * uni-app中调用示例：\n\t\t\t * this.$refs[\"组件ref\"].doSomething(\"uts-button\");\n\t\t\t *\n\t\t\t * uni-app x中调用示例：\n\t\t\t * 1、引入对应Element\n\t\t\t * import { UtsButtonElement(组件名称以upper camel case方式命名 + Element) } from 'uts.sdk.modules.utsComponent(组件目录名称以lower camel case方式命名)';\n\t\t\t * 2、(this.$refs[\"组件ref\"] as UtsButtonElement).doSomething(\"uts-button\");\n\t\t\t * 或 (uni.getElementById(\"组件id\") as UtsButtonElement).doSomething(\"uts-button\");\n\t\t\t */\n\t\t\tdoSomething(param : string) {\n\n\t\t\t},\n\t\t\t\n\t\t\thideWebView() {\n\t\t\t\t// console.log(\"this.$el=\", this.$el)\n\t\t\t\t// console.log(\"this.$el=\", this.webView)\n\t\t\t\tthis.$el!.visibility = View.GONE\n\t\t\t\t// this.$el!.setVisibility(View.GONE);\n\t\t\t\t// this.$el!.setVisibility(View.GONE);\n\t\t\t\t// this.webView!.setVisibility(View.INVISIBLE);\n\t\t\t\t// 隐藏且不占用空间\n\t\t\t\t// this.$el!.setVisibility(View.GONE);\n\t\t\t},\n\t\t\t// 显示 WebView\n\t\t\t// 这里 有问题 但是 \"hidden\" watch 就是好的,不知道为什么 showWebView 就是不行 一样的代码\n\t\t\tshowWebView() {\n\t\t\t\t\n\t\t\t\tthis.$el!.visibility = View.VISIBLE\n\t\t\t\t// this.$el!.loadUrl(\"https://www.baidu.com\");\n\t\t\t\t// // 确保父布局可见\n\t\t\t\t// let parent : ViewGroup = this.$el!.getParent() as ViewGroup;\n\t\t\t\t// if (parent.getVisibility() != View.VISIBLE) {\n\t\t\t\t// \tparent.setVisibility(View.VISIBLE);\n\t\t\t\t// }\n\t\t\t\t// this.$el!.setVisibility(View.VISIBLE);\n\t\t\t\t// // console.log(\"this.$el=\",this.$el)\n\t\t\t\t// // console.log(\"this.$el=\",this.webView)\n\t\t\t\t// // this.webView!.setVisibility(View.VISIBLE);\n\t\t\t\t// // this.$el!.setVisibility(View.VISIBLE);\n\t\t\t\t// // this.webView!.setVisibility(View.VISIBLE);\n\t\t\t\t// this.$el!.loadUrl(\"https://www.baidu.com\"); // 重新加载内容\n\t\t\t},\n\t\t\t/**\n\t\t\t * 内部使用的组件方法\n\t\t\t */\n\t\t\tprivateMethod() {\n\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * [可选实现] 组件被创建，组件第一个生命周期，\n\t\t * 在内存中被占用的时候被调用，开发者可以在这里执行一些需要提前执行的初始化逻辑\n\t\t */\n\t\tcreated() {\n\t\t\tconsole.log(\"created\")\n\n\t\t},\n\t\t/**\n\t\t * [可选实现] 对应平台的view载体即将被创建，对应前端beforeMount\n\t\t */\n\t\tNVBeforeLoad() {\n\t\t\tconsole.log(\"NVBeforeLoad\")\n\t\t},\n\t\t/**\n\t\t * [必须实现] 创建原生View，必须定义返回值类型\n\t\t * 开发者需要重点实现这个函数，声明原生组件被创建出来的过程，以及最终生成的原生组件类型\n\t\t * （Android需要明确知道View类型，需特殊校验）\n\t\t * \n\t\t * \n\t\t * 这个事件太慢了 父组件完全加载完毕了 这个才初始化,提前赋值是不行的,ui实例没创建出来\n\t\t */\n\t\tNVLoad() : WebView {\n\t\t\tlet webView = new WebView($androidContext!);\n\t\t\t\n\t\t\tconst webSettings = webView.getSettings();\n\t\t\t// 启用 JavaScript\n\t\t\twebSettings.setJavaScriptEnabled(true);\n\t\t\t// 启用 DOM 存储\n\t\t\twebSettings.setDomStorageEnabled(true);\n\t\t\t// 缩放至屏幕宽度\n\t\t\twebSettings.setLoadWithOverviewMode(true); \n\t\t\t\n\t\t\t// 禁用硬件加速\n\t\t\t// webView.setLayerType(View.LAYER_TYPE_SOFTWARE, null); \n\t\t\t\n\t\t\t// 请求定位权限\n\t\t\twebSettings.setGeolocationEnabled(true);\n\t\t\t\n\t\t\t// // 启用混合内容加载（HTTP 和 HTTPS）\n\t\t\t// if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\t\t\t//     webSettings.setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW); // 允许加载混合内容\n\t\t\t// }\n\t\t\t// 监听事件 \n\t\t\t// 必须的 需要借助 UTSComponent 拿到webview的ui实例\n\t\t\tconst webViewUIHandler = new WebViewUIHandler(this);\n\t\t\twebView.setWebViewClient(new MyWebViewClient(webViewUIHandler, webView));\n\n\t\t\twebView.loadUrl(this.webUrl)\n\t\t\t\n\t\t\tthis.webViewUIHandler = webViewUIHandler;\n\t\t\tthis.webView = webView;\n\n\t\t\treturn webView;\n\t\t},\n\t\t/**\n\t\t * [可选实现] 原生View已创建\n\t\t */\n\t\tNVLoaded() {\n\n\t\t},\n\t\t/**\n\t\t * [可选实现] 原生View布局完成\n\t\t */\n\t\tNVLayouted() {\n\t\t\tconsole.log(\"NVLayouted\", this.webUrl);\n\t\t\t// 原生View布局完成 去调用父组件 告诉他 赋值 webUrl到这个组件上面来\n\t\t\tthis.webViewUIHandler?.setWebUrl();\n\t\t},\n\t\t/**\n\t\t * [可选实现] 原生View将释放\n\t\t */\n\t\tNVBeforeUnload() {\n\t\t\tconsole.log(\"NVBeforeUnload\")\n\t\t},\n\t\t/**\n\t\t * [可选实现] 原生View已释放，这里可以做释放View之后的操作\n\t\t */\n\t\tNVUnloaded() {\n\t\t\tconsole.log(\"NVUnloaded\")\n\t\t},\n\t\t/**\n\t\t * [可选实现] 组件销毁\n\t\t */\n\t\tunmounted() {\n\t\t\tconsole.log(\"unmounted\")\n\t\t},\n\t\t/**\n\t\t * [可选实现] 自定组件布局尺寸，用于告诉排版系统，组件自身需要的宽高\n\t\t * 一般情况下，组件的宽高应该是由终端系统的排版引擎决定，组件开发者不需要实现此函数\n\t\t * 但是部分场景下，组件开发者需要自己维护宽高，则需要开发者重写此函数\n\t\t * \n\t\t * HBuilder X 4.25 版本后新增 UTSMeasureMode 参数\n\t\t */\n\t\tNVMeasure(size : UTSSize, mode : UTSMeasureMode) : UTSSize {\n\t\t\treturn size;\n\t\t}\n\t}\n\n\t// 处理js执行完毕之后的回调 拿到页面的元素信息\n\tclass ValueCallbackMethod extends ValueCallback<string>{\n\t\tprivate webViewUIHandler : WebViewUIHandler;\n\n\t\tconstructor(webViewUIHandler : WebViewUIHandler) {\n\t\t\tsuper();\n\t\t\tthis.webViewUIHandler = webViewUIHandler;\n\n\t\t}\n\t\toverride onReceiveValue(value : string) : void {\n\t\t\t// 直接执行 $emit(\"event\",Any)\t\n\t\t\t// this.$emit!(\"updateHtml\", {\n\t\t\t// \tcqyData: value\n\t\t\t// })\n\t\t\tthis.webViewUIHandler.handleClick(value);\n\t\t}\n\t}\n\n\n\t// 自定义 WebViewClient\n\tclass MyWebViewClient extends WebViewClient {\n\t\t\n\t\tprivate webViewUIHandler : WebViewUIHandler;\n\n\t\tprivate webView : WebView;\n\t\t\n\n\t\tconstructor(webViewUIHandler : WebViewUIHandler, webView : WebView) {\n\t\t\tsuper();\n\t\t\tthis.webViewUIHandler = webViewUIHandler;\n\t\t\tthis.webView = webView;\n\t\t}\n\n\t\t// 页面加载完成时的逻辑 可能会触发多次 不知道为什么\n\t\toverride onPageFinished(view : WebView, url : string) : void {\n\t\t\tsuper.onPageFinished(view, url);\n\t\t\t// html: encodeURIComponent(document.documentElement.outerHTML), // 对 HTML 进行 URL 编码\n\t\t\tview.evaluateJavascript(\n\t\t\t\t`\n\t\t\t\t(function() {\n\t\t\t\t    const data = {\n\t\t\t\t        title: document.title,\n\t\t\t\t        host: window.location.host\n\t\t\t\t    };\n\t\t\t\t    return data;\n\t\t\t\t})();\n\t\t\t\t`,\n\t\t\t\tnew ValueCallbackMethod(this.webViewUIHandler)\n\t\t\t);\n\t\t}\n\t\t\n\t\toverride shouldOverrideUrlLoading(view: WebView, request: WebResourceRequest): boolean {\n\t\t        const url = request.getUrl().toString();\n\t\t\t\tconsole.log(\"url===\",url)\n\t\t\t\t // 拦截 HTTP 和 HTTPS 请求，让 WebView 正常加载\n\t\t\t\t        if (request.url.scheme == \"http\" || request.url.scheme == \"https\") {\n\t\t\t\t            return false // 返回 false 表示让 WebView 正常加载\n\t\t\t\t        }\n\t\t        return this.handleUrlLoading(url,view);\n\t\t    }\n\t\t\n\t// \t  override shouldOverrideUrlLoading(view: WebView, url: string): boolean {\n\t// \t          return this.handleUrlLoading(url);\n\t// \t      }\n\t\n\t\t handleUrlLoading(url: string,view: WebView): boolean {\n\t\t\n\t\t            // 拦截自定义协议\n\t\t            console.log(\"Blocked URL:\", url);\n\t\t\t\t\t\n\t\t\t\t\t    let intent:Intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));\n\t\t\t\t\t    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_SINGLE_TOP);\n\t\t\t\t\t    // startActivity($androidContext,intent);\n\t\t\t\t\tview.context.startActivity(intent)\n\t\t\t\t\n\t\t\t\t\t\n\t\t            return true; // 拦截请求，禁止加载\n\t\t\t\t\n\t\t    }\n\t}\n\n\t// 获取ui的实例 才能使用 $emit\n\tclass WebViewUIHandler {\n\t\tprivate comp : UTSComponent<WebView>;\n\n\t\tconstructor(comp : UTSComponent<WebView>) {\n\t\t\tthis.comp = comp;\n\t\t}\n\n\t\t// 传输js的代码给父组件\n\t\thandleClick(data : string) {\n\t\t\tthis.comp.$emit(\"updateHtml\", {\n\t\t\t\tcqyData: data\n\t\t\t});\n\t\t}\n\t\t// 告诉父组件 可以把url传给webVIew了\n\n\t\tsetWebUrl() {\n\t\t\tthis.comp.$emit(\"setWebUrl\");\n\t\t}\n\n\n\t}\n\n\n\n\n\n"],"names":[],"mappings":"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"}